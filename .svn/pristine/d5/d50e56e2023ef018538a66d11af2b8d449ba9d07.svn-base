<template>
  <div class="wxconsultdoctor">
    <div class="c_tip">
    <div class="c_top">
      <div class="top_content">
        <img :src="zxinfo.imgUrl!=''?zxinfo.imgUrl:userImg">
        <div class="top_div">{{zxinfo.name}}
          <div>{{zxinfo.sex}}  {{zxinfo.age}}岁  {{zxinfo.address}}</div>
        </div>
        <div class="top_right" @click="tophone"><img src="../../../assets/imgs/xconsultuser1.png"/></div>
      </div>
      <div class="top_zx">
        <div class="top_zx_img"><div v-show="isZxXq" @click="tozxinfo"><img src="../../../assets/imgs/xconsultinfo.png"/></div></div>
        <div class="top_zx_num"><div>剩余免费咨询{{consultnum}}次</div></div>
        <div class="top_zx_time"><div>剩余时长：{{countDownList}}</div></div>
      </div>
    </div>
      <div class="c_tip_text">回复请尽量准确明了，减少患者反复询问，避免耽搁您的 宝贵时间。感谢您的辛勤付出！</div></div>
    <div class="consultContent" id="dialogue_box">
      <div v-for="(item,index) in messageItems">
        <div v-if="item.userType === 1">
          <div class="consultTime1">
            <div class="style_time1" v-show="messageItems.length!=index+1">追问 {{item.time}}</div>
            <div class="style_time2" v-show="messageItems.length===index+1">新追问 {{item.time}}</div>
          </div>
          <div class="consultText">
            <div class="yourphoto"><img :src="item.selfimg!=''?item.selfimg:userImg"/></div>
            <div v-if="item.msgType === 'text'" class="yourdialog">{{ item.msg }}</div>
            <div class="yourdialog" v-else-if="item.msgType === 'img'">
              <viewer>
              <img :src="item.msg"/>
              </viewer>
            </div>
            <!--           <div class="yourdialog">{{item.msg}}</div>-->
          </div>
        </div>
        <div v-else-if="item.userType === 2">
          <div class="consultTime">
            <div class="style_time">{{item.time}} 回复</div>
          </div>
          <div class="consultText">
            <div class="myphoto"><img :src="item.doctorimg!=''?item.doctorimg:doctorImg"/></div>
            <div v-if="item.msgType === 'text'" class="mydialog">{{ item.msg }}</div>
            <div class="mydialog" v-else-if="item.msgType === 'img'">
              <img :src="item.msg"/>
            </div>
            <!--           <div class="mydialog">{{item.msg}}</div>-->
          </div>
        </div>
      </div>
    </div>
    <div class="wxbottom">
    <div class="wxtip">每名患者有两次追问权限，医生不受限制，回复请尽量<br>准确明了，感谢您的辛勤付出！</div>
    <div class="consultBottom">
      <div class="bottomvideo" @click="toVoice"></div>
      <div class="bottominput">
       <!-- <input v-model="textMsg" placeholder="请输入" autofocus="autofocus"/>-->
        <textarea ref="textarea" v-model="textMsg" :maxlength="keywordsMax"></textarea>
      </div>
      <div class="bottompic">
        <input type="file" accept="image/*" id="imagePicker" value @change="onSendImgMsg"/>
      </div>
      <div class="bottomsub" @click="onSendTextMsg"></div>
    </div>
    </div>
    <!--<div class="c_sub" @click="onSendTextMsg"></div>-->
  </div>
</template>

<script>
  import {getmorehistory, getSig, getuserfree, getwxconsulthistoryadd} from "../../../api";
  import moment from "moment";
  import {autoTextarea} from "../../../utils";
  let RTC;
  let stream;
  export default {
    name: "wxconsultdoctor",
    data() {
      return {
        doctorImg:require("../../../assets/imgs/x_docimg.png"),
        userImg:require("../../../assets/imgs/manPatient.png"),
        consultnum: 0,
        consultimg: require("../../../assets/imgs/img_yhtd_doctor.png"),
        messageItems: [
         /* {
            msgType:'text',
            msg:'问权限，医生不受限制，回复请尽量问权限，医生不受限制，回复请尽量问权限，医生不受限制，回复请尽量',
            userType:'1',

          },{
            msgType:'text',
            msg:'问权限，医生不受限制，回复请尽量问权限，医生不受限制，回复请尽量问权限，医生不受限制，回复请尽量',
            userType:'2',
          },{
            msgType:'text',
            msg:'问权限，医生不受限制，回复请尽量问权限，医生不受限制，回复请尽量问权限，医生不受限制，回复请尽量',
            userType:'1',
          },{
            msgType:'text',
            msg:'问权限，医生不受限制，回复请尽量问权限，医生不受限制，回复请尽量问权限，医生不受限制，回复请尽量',
            userType:'2',
          }*/
        ],     //咨询对话
        identifier:'4814817341559808',   //用户id
        userSig:'',
        textMsg: '',  //文本内容
        oddtime:'',
        zxinfo:'',
        countDownList: '24:00',
        actEndTime: '2020-02-20 18:50:00',
        consultId:this.$route.params.consultId,
        isZxXq:false,  //是否有咨询详情表单 默认否
        istype:this.$route.params.catCd,   //区分新冠 60000.130.110  慢病60000.130.120
        consultuserId:this.$route.params.fromId,  //聊天的用户id   @@咨询详情里的改成fromId
        ishomeconsult:this.$route.params.type,  //区分医生主页的点击入口 ，‘1’为新冠
        statCd:'1',
        talkType:'60000.130.110',
        conversationID:this.$route.query.conversationID,
        datedate:'',
        timer:null,

        keywordsMax: 128,
        keywords: '',
        roomId:'',  //自定义房间号
        count: 0,
        mySend:'',   //定时器
        myTime:'',   //定时器
        userSig:sessionStorage.getItem('doctorSig'),
        sdkAppId: '1400267551',
        houtaidate:'',   //后台传过来的date
        freetalktype:'', // from  to  接口传talktype  1疫情 2慢病

      }
    },
    methods: {
      //给安卓调的 获取安卓给我的语音转文字字符串
      getvoice() {
        this.$bridge.registerHandler("nativeVoice", (data, responseCallback) => {
          this.textMsg=data;
        })
      },
      //调安卓的语音转文字
      toVoice(){
        this.$bridge.callHandler("getSpeech", "", () => {
        });
      },
      tophone(){
        this.$dialog.confirm({
          title: '拨打提示',
          message: '电话为网络电话，您可以在紧急情况或图文咨询沟通不清楚时拨打患者电话，患者无法回拨，您不用担心泄露个人信息，是否拨打由您自主决定',
          confirmButtonText: '确认拨打',
          confirmButtonColor: '#3FA998'
        }).then(() => {
          this.onSendCustomMsg();
        }).catch(() => {

        });
      },
      timeFormat(param) {
        return param < 10 ? '0' + param : param;
      },
      countDown() {
        this.timer = setInterval(() => {
          // 获取当前时间，同时得到活动结束时间数组
          let newTime = new Date().getTime();
          // 对结束时间进行处理渲染到页面
          let endTime = new Date(this.datedate).getTime();
          let obj = null;
          // 如果活动未结束，对时间进行处理
          if (endTime - newTime > 0) {
            let time = (endTime - newTime) / 1000;
            // 获取天、时、分、秒
            let day = parseInt(time / (60 * 60 * 24));
            let hou = parseInt(time % (60 * 60 * 24) / 3600);
            let min = parseInt(time % (60 * 60 * 24) % 3600 / 60);
            let sec = parseInt(time % (60 * 60 * 24) % 3600 % 60);
            obj = {
              day: this.timeFormat(day),
              hou: this.timeFormat(hou),
              min: this.timeFormat(min),
              sec: this.timeFormat(sec)
            };
          } else { // 活动已结束，全部设置为'00'
            obj = {
              day: '00',
              hou: '00',
              min: '00',
              sec: '00'
            };
            clearInterval(this.timer);
          }
          this.countDownList = obj.hou + ':' + obj.min;
        }, 1000);
      },
      tozxinfo(){
      /*  if(this.istype){        //如果是消息中心进来的
          sessionStorage.setItem('consultId', this.zxinfo.conId); ///?????
        }*/
        this.$router_({path:'/formConsultDetail'})
      },
      getinfo(){
        if(this.istype){   //如果是从消息中心进来的
         // this.consultuserId='';  //取fromid
          if(this.istype==='60000.130.110'){
            //this.isZxXq=true;
            this.freetalktype='1';
          }else {
            //this.isZxXq=false;
            this.statCd='2';
            this.talkType='60000.130.120';
            this.freetalktype='2';
          }
        }else if(this.ishomeconsult){
        //  this.isZxXq=true;
        }else {
          this.statCd='2';
          this.talkType='60000.130.120';
          this.freetalktype='2';
        }
        let fromId=Number(localStorage.getItem('doctorId'));
        getuserfree(fromId,this.consultuserId,this.freetalktype).then((res)=>{
          this.zxinfo=res.data.data;
          sessionStorage.setItem('phonename',this.zxinfo.name);
          if(this.zxinfo.conId){
            sessionStorage.setItem('consultId',this.zxinfo.conId);
            this.isZxXq=true;
          }
          if(this.zxinfo.times>0){
            this.consultnum = this.zxinfo.times;
          }
          console.log('doccccccc',res.data.data);
          let date = res.data.data.date;
          this.houtaidate=res.data.data.date;
          if(date){
              date = date.replace(/-/g, '/')
            let t = new Date(date).getTime() + 24 * 60 * 60 * 1000;   //24小时 * 60分钟 * 60秒 * 1000
              this.datedate = moment(t).format('YYYY/MM/DD HH:mm:ss')
            this.$nextTick(()=>{
              this.countDown();
            });
          }
          else {

          }
          this.getHistoryMessage();
        });
      },
      //取当前时间
      getTime() {
        let timedata = new Date();
        let timeyear=timedata.getFullYear();
        let timemonth = timedata.getMonth() + 1;
        let timeday = timedata.getDate();
        let timehour = timedata.getHours();
        let timemin = timedata.getMinutes();
        let timeseconds = timedata.getSeconds();
        this.showtime = timeyear+'-'+timemonth + '-' + timeday + ' ' + timehour + ':' + timemin;
      },
      //登录腾讯im获取秘钥
      getUserSig(){
        getSig(this.identifier).then(res=>{
          this.userSig=res.data.data;
          this.getIMBegin();
        });
      },
      //登录im
      getIMBegin() {
        let promise = this.tim.login({
          userID: this.identifier, //登录的会员id
          userSig: this.userSig
        });
        promise.then(imResponse => {
          console.log("IM登录成功",imResponse);
        })
          .catch(function (imError) {
            console.warn("login error:", imError); // 登录失败的相关信息
          });
      },
      //历史数据只能是被发的一方，得取两次
      getHistoryMessage(){
        let that=this;
        let historyList=[];
        let conversationID = 'C2C' + this.consultuserId; //要聊天的用id
        //let conversationID='C2C'+4813480599409664;
        let selfconversationID='C2C'+localStorage.getItem('doctorId');
        console.log('进入历史数据啦',conversationID);
        let promise1 = tim.getMessageList({conversationID:conversationID , count: 15});//"C2C3664372564677633"
        promise1.then(function(imResponse) {
          const messageList1 = imResponse.data.messageList; // 消息列表。
          const isCompleted1 = imResponse.data.isCompleted; // 表示是否已经拉完所有消息。
          console.log('history33',messageList1,isCompleted1);
          messageList1.forEach((message)=>{
            if (message.type === "TIMTextElem"&&message.flow==='in') {
              historyList.push({
                msgType: "text",
                msg: message.payload.text,
                time: that.getLocalTime(message.time),
                userType: 1,
                selfimg: that.zxinfo.imgUrl
              })
            } else if(message.type === "TIMImageElem"&&message.flow==='in'){
              historyList.push({
                msgType: "img",
                msg: message.payload.imageInfoArray[0].imageUrl,
                time: that.getLocalTime(message.time),
                userType: 1,
                selfimg: that.zxinfo.imgUrl
              })
            }else if(message.type === "TIMTextElem"&&message.flow==='out'){
              historyList.push({
                msgType: "text",
                msg: message.payload.text,
                time: that.getLocalTime(message.time),
                userType: 2,
                doctorimg: that.zxinfo.selefImgUrl
              })
            }else if(message.type === "TIMImageElem"&&message.flow==='out'){
              historyList.push({
                msgType: "img",
                msg: message.payload.imageInfoArray[0].imageUrl,
                time: that.getLocalTime(message.time),
                userType: 2,
                doctorimg: that.zxinfo.selefImgUrl
              })
            }

          });
          console.log('历史记录list',historyList);
          that.messageItems=historyList;
          that.scrollBottom();
          console.log('messss',that.messageItems);
        });
        let teamId=this.consultuserId+'';
        let userId=localStorage.getItem('doctorId');
        getmorehistory('4813480599409664','4814817341559808').then((res)=>{
          console.log('mmmm777',res);
        })
       /* getmorehistory(teamId,userId).then((res)=>{
          console.log('mmmm777',res.data.list);
        })*/

      },
      //时间戳转日期格式
      getLocalTime(nS) {
        let time = moment(nS*1000).format()
        let d = new Date(time);
        let batchDate = d.getFullYear() + '年' + (d.getMonth() + 1) + '月' + d.getDate() +'日'
        let batchTime = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + ' ' + d.getHours() + ':' + d.getMinutes() ;
        return batchTime
        //return new Date(parseInt(nS) * 1000).toLocaleString().replace(/年|月/g, "-").replace(/日/g, " ");
      },

      onReadyStateUpdate() {
        //this.getHistoryMessage();
      },
      //收到信息事件
      onMessageReceived(event) {
        let presentTime = new Date();
        presentTime.setMinutes(presentTime.getMinutes() - 1);
        let presentString = Date.parse(presentTime) / 1000;
        console.log("onMessage", event);
        let length = event.data.length;
        let res = event.data[0];
        let historyTime = res.time;
        let type = res.type;
        this.count = this.count + 1;
        let count = this.count;
        console.log("Messageres", res.from, count);
        //push 接收到的msg
        if (presentString < historyTime) {
          if (this.countall) {
            console.log("已经接听过了");
          } else {
            console.log("没有接听过了");
            this.doctorIdaccept = res.from;
            this.addMsg(type, res);
          }
        }
      },
      //收到信息回调
      addMsg(type, res) {
        this.getTime();
        if (type === TIM.TYPES.MSG_TEXT) {
          this.messageItems.push({
            msg: res.payload.text,
            name: res.from,
            tx: res,
            userType: 1,
            msgType: "text",
            time:this.showtime,
            selfimg:this.zxinfo.imgUrl
          });
        } else if (type === TIM.TYPES.MSG_IMAGE) {
          this.messageItems.push({
            msg: res.payload.imageInfoArray[0].imageUrl,
            name: res.from,
            tx: res,
            userType: 1,
            msgType: "img",
            time:this.showtime,
            selfimg:this.zxinfo.imgUrl
          });
        }else if (type === TIM.TYPES.MSG_CUSTOM) {
          let dataJson = JSON.parse(res.payload.extension);
          console.log("自定义消息", dataJson);
          let roomId = dataJson.roomId;
          this.roomId = roomId;
          sessionStorage.setItem("p", dataJson.roomId);
          console.log("receive", this.roomId);
        }
      },
      //发送文本消息
      onSendTextMsg() {
        this.getTime();
        let text = this.textMsg;
        let topeople=this.consultuserId+'';//'4745078308721664';
        let message = tim.createTextMessage({
          to:topeople,
          conversationType: TIM.TYPES.CONV_C2C,
          payload: {
            text: text
          }
        });
        // 2. 发送消息
        let promise = tim.sendMessage(message);
        promise
          .then(imResponse => {
            if(!this.houtaidate&&!this.datedate){
              let t = new Date().getTime() + 24 * 60 * 60 * 1000;   //24小时 * 60分钟 * 60秒 * 1000
              this.datedate = moment(t).format('YYYY/MM/DD HH:mm:ss')
              this.$nextTick(()=>{
                this.countDown();
              });
            }
            console.log('imResponse',imResponse);
            this.textMsg = "";
            // 发送成功
            if(this.conversationID){
              tim.setMessageRead({conversationID: this.conversationID});
            }
            this.scrollBottom();
            //添加历史数据并减少一次咨询次数
            let hjjkHistoryRecordRo={
              consultId: Number(sessionStorage.getItem('consultId')),      //im取
              fromId: Number(localStorage.getItem('doctorId')),
              isDoctor: 1,
              msg: imResponse.data.message.payload.text,
              msgType: 'text',
              sendDate: this.getLocalTime(imResponse.data.message.time),
              statCd: this.statCd,    //1 疫情 2慢病
              toId: Number(this.consultuserId),
              type: '2',  //用户传 0  医生传 2  字符串
              talkType:this.talkType,
              illType:sessionStorage.getItem('mbnameid'),
            };
            getwxconsulthistoryadd(hjjkHistoryRecordRo).then((res)=>{
              this.consultnum=res.data.data;
              console.log('hissssss',res.data.data);
            })
            this.messageItems.push({
              msg: imResponse.data.message.payload.text,
              name: imResponse.data.message.from,
              tx: "../../../assets/imgs/specialist.png",
              userType: 2,
              msgType: "text",
              time:this.showtime,
              doctorimg:this.zxinfo.selefImgUrl
            });
          })
          .catch(function(imError) {
            // 发送失败
            console.log(imError);
            //console.warn('sendMessage error:', imError);
          });


      },
      //发送图片消息
      onSendImgMsg() {
        this.getTime();
        let topeople=this.consultuserId+'';//'4745078308721664';
        let message = tim.createImageMessage({
          to: topeople,  //topeople
          conversationType: TIM.TYPES.CONV_C2C,
          payload: {
            file: document.getElementById("imagePicker")
          },
          onProgress: function (event) {
            console.log("file uploading:", event);
          }
        });
        // 2. 发送消息
        let promise = tim.sendMessage(message);
        promise
          .then(imResponse => {
            if(!this.houtaidate&&!this.datedate){
              let t = new Date().getTime() + 24 * 60 * 60 * 1000;   //24小时 * 60分钟 * 60秒 * 1000
              this.datedate = moment(t).format('YYYY/MM/DD HH:mm:ss')
              this.$nextTick(()=>{
                this.countDown();
              });
            }
            // 发送成功
            this.scrollBottom();
            let hjjkHistoryRecordRo = {
              consultId: Number(sessionStorage.getItem('consultId')),
              fromId: Number(localStorage.getItem('doctorId')),
              isDoctor: 1,
              msg: imResponse.data.message.payload.imageInfoArray[0].imageUrl,
              msgType: 'img',
              sendDate: this.getLocalTime(imResponse.data.message.time),
              statCd: this.statCd,
              toId: Number(this.consultuserId),
              type: '2',  //用户传 0  医生传 2  字符串
              talkType:this.talkType,
              illType: sessionStorage.getItem('mbnameid'),
            };
            getwxconsulthistoryadd(hjjkHistoryRecordRo).then(res => {
              this.consultnum=res.data.data;
              console.log('hjjkHistoryRecordRo', res);
            });
            console.log(imResponse.data.message.payload);
            if (message.type === TIM.TYPES.MSG_IMAGE) {
              this.messageItems.push({
                msg:
                imResponse.data.message.payload.imageInfoArray[0].imageUrl,
                name: imResponse.data.message.from,
                tx: imResponse.data,
                userType: 2,
                msgType: "img",
                time: this.showtime,
                doctorimg:this.zxinfo.selefImgUrl
              });
            }
          })
          .catch(function (imError) {
            // 发送失败
            console.warn("sendMessage error:", imError);
          });
      },
      scrollBottom() {
        this.$nextTick(function () {
          let div = document.getElementById('dialogue_box');
          div.scrollTop = div.scrollHeight;
        })
      },

      //自定义消息
      onSendCustomMsg() {
        let strings = this.roomId;
        // 2. 创建消息实例，接口返回的实例可以上屏
        let topeople=this.consultuserId+'';
        let message = tim.createCustomMessage({
          to:topeople,  //topeople
          conversationType: TIM.TYPES.CONV_C2C,
          payload: {
            data: "dice", // 用于标识该消息是骰子类型消息
            description: strings, // 获取骰子点数
            extension: JSON.stringify({
              roomId: strings,
            })
          }
        });
        // 3. 发送消息
        let promise = tim.sendMessage(message);
        console.log('fasongde ',message);
        promise
          .then(imResponse => {
            this.$router.push({path:'/wxconsultphone',query:{roomId:this.roomId}})
            this.mySend=setTimeout(e => {
                this.$confirm("患者目前不在，是否继续等待", "温馨提示", {
                  confirmButtonText: '退出',
                  cancelButtonText: '继续等待',
                }).then(() => {
                  this.WebSocketClose();
                }).catch(() => {
                  this.myTime=setTimeout(e=>{
                      this.WebSocketClose();
                      this.$alert("患者接听超时，视频断开","温馨提示",{
                        confirmButtonText: '确定',
                      });
                  },120000);//120000
                });
            }, 120000);  //120000
          })
          .catch(function(imError) {
            // 发送失败
            console.warn("sendMessage error:", imError);
          });
      },


      clearKeywords () {
        this.keywords = '';
        this.list = [];
        let textarea = this.$refs.textarea;
        let height = 40;

        //this.$refs.list.style.height = `calc(100% - height)`;
        textarea.focus();
      },
    },
    mounted() {
      //this.getUserSig();
      this.getinfo();
      this.roomId = Math.random().toString().substring(2,7);
      this.tim.on(TIM.EVENT.SDK_READY, this.onReadyStateUpdate);
      this.tim.on(TIM.EVENT.MESSAGE_RECEIVED, this.onMessageReceived);
      this.getvoice();

      this.$nextTick(() => {
        let textarea = this.$refs.textarea;
        textarea.focus();
        let prevHeight = 65;
        textarea && autoTextarea(textarea, 5, 60, (height) => {
        });
      })
    },
   destroyed() {
    clearTimeout(this.myTime);
    clearTimeout(this.mySend);
  },
  }
</script>

<style scoped lang="less">
  .wxconsultdoctor {
    font-size: 0.28rem;
    color: #595757;
    background: #F2F2F2;
    height: 100%;
    .phonestyle{
      width: 50%;
      height: 50%;
    }
    .wxbottom{
      width: 100%;
      height: auto;
      position: absolute;
      bottom: 0;
    }
    .c_top{
      padding-top: 0.3rem;
      font-size: 0.28rem;
      color: #595757;
      height: 1.52rem;
      border-radius: 0 0 0.2rem 0.2rem;
      border: 0;
      background: white;
      //box-shadow: 0rem 0.2rem 0.2rem -0.2rem rgba(96, 96, 96, 0.24);
      .top_content{
        margin: 0 auto;
        width: 7rem;
        height: 0.9rem;
        display: flex;
        justify-content: space-between;
        img{
          border-radius: 0.45rem;
          width: 0.9rem;
          height: 0.9rem;
        }
        .top_div{
          width: 3.5rem;
          height: 0.78rem;
          border-right: 0.02rem solid #F6F3F7;
        }
        .top_name{
          font-size: 0.3rem;
          font-weight: bold;
        }
        .top_right{
          margin-top: 0.2rem;
          width: 2rem;
          height: 0.7rem;
          img{
            border-radius: 0;
            width: 1.74rem;
            height: 0.49rem;
          }
        }
      }
      .top_mb{
        font-size: 0.3rem;
        color: #56B2AD;
        width: 5rem;
        height: 0.3rem;
        margin-left: 0.3rem;
        margin-top: 0.1rem;
      }
      .top_zx{
        color: #EB6100;
        font-size: 0.28rem;
        margin-left: 0.27rem;
        width: 7rem;
        height: 0.5rem;
        display: flex;
        justify-content: space-between;
        .top_zx_img{
          margin-top: 0.15rem;
          width: 1.91rem;
          height: 0.34rem;
          img{
            //margin-top: 0.15rem;
            width: 1.91rem;
            height: 0.34rem;
          }
        }

        .top_zx_num{
          margin-top: 0.1rem;
          width: 2.6rem;
          height: 0.4rem;
          text-align: right;
        }
        .top_zx_time{
          margin-top: 0.1rem;
          width: 2.2rem;
          height: 0.4rem;
        }
      }
    }
    .c_tip{
      height: 2.8rem;
      background: #F9E5D5;
      color: #EB6100;
      .c_tip_text{
        margin-left: 0.44rem;
        margin-top: 0.1rem;
        width: 6.5rem;
        height: 0.65rem;
      }
    }
    .consultContent{
      width: 100%;
      //height: 70%;
      position: absolute;
      top:3.7rem;
      bottom: 2.3rem;
      overflow-y: auto;
      z-index:1;
      background: #f2f2f2;
      .consultTime1{
        margin: 0.5rem auto 0;
        color: #cecdcb;
        font-size: 0.26rem;
        width: 100%;
        height: 0.35rem;
        display: flex;
        justify-content: flex-start;
        .style_time1{
          margin-left: 1.6rem;
        }
        .style_time2{
          color: #EB6100;
          margin-left: 1.6rem;
        }
      }
      .consultTime{
        margin: 0.5rem auto 0;
        color: #cecdcb;
        font-size: 0.26rem;
        width: 100%;
        height: 0.35rem;
        display: flex;
        justify-content: flex-end;
        .style_time{
          margin-right: 1.74rem;
        }
      }
      .consultText{
        width:7rem;
        .mydialog{
          max-width: 4.5rem;
          margin-bottom: 0.7rem;
          margin-right: 0.3rem;
          float: right;
          display: inline-block;
          padding: 0.15rem 0.15rem;
          margin-top: 0.4rem;
          border-radius: 0.2rem;
          font-size: 0.28rem;
          color: white;
          background: #83c4c1;
          img{
            width: 4rem;
            height: 4rem;
          }
        }
        .myphoto{
          margin-top: 0.2rem;
          float: right;
          width: 1rem;
          height: 1rem;
          border-radius: 0.5rem;
          img{
            width: 1rem;
            height: 1rem;
            border-radius: 0.5rem;
          }
        }
        .yourphoto{
          margin-top: 0.2rem;
          margin-left: 0.5rem;
          float: left;
          width: 1rem;
          height: 1rem;
          border-radius: 0.5rem;
          //background: #f6a540;
          img{
            width: 1rem;
            height: 1rem;
            border-radius: 0.5rem;
          }
        }
        .yourdialog{
          margin-left: 0.3rem;
          max-width: 4.5rem;
          margin-bottom: 0.7rem;
          float: left;
          display: inline-block;
          padding: 0.15rem 0.15rem;
          margin-top: 0.4rem;
          border-radius: 0.2rem;
          font-size: 0.28rem;
          color: #777777;
          background: white;
          img{
            width: 4rem;
            height: 4rem;
          }
        }
      }
    }
    .dialogBottom {
      padding-top: 0.3rem;
      /* left: 50%;
       margin-left: -1.5rem;*/
      text-align: center;
      /*width: 3rem;
      height: 0.2rem;*/
      width: 100%;
      height: 0.4rem;
      color: #999999;
      font-size: 0.26rem;
      position: absolute;
      bottom: 1.8rem;
      background: #F2F2F2;
    }
    .wxtip{
      padding-top: 0.2rem;
      padding-left: 0.2rem;
      color: #56B2AD;
      width: 100%;
      height: 0.9rem;
      //position: absolute;
      //bottom: 1rem;
      background: #f7f7f7;
    }
    .consultBottom {
      width: 100%;
      //height: 1rem;
      background: #f7f7f7;
      //position: absolute;
     // bottom: 0;
      display: flex;
      justify-content: space-around;

      .bottomvideo {
        margin-top: 0.3rem;
        width: 0.39rem;
        height: 0.45rem;
        background: url("../../../assets/imgs/consult5_x.png");
        background-size: 0.39rem 0.45rem;
      }

      .bottominput {
        margin-top: 0.25rem;
        width: 4.15rem;
       // height: 0.5rem;

        input {
          color: #777777;
          width: 4rem;
          height: 0.7rem;
          border-radius: 0.1rem;
          padding-left: 0.2rem;
        }
        textarea{
          font-size: 0.3rem;
          width: 4rem;
          height: 0.7rem;
        }
      }

      .bottompic {
        margin-top: 0.3rem;
        width: 0.45rem;
        height: 0.38rem;
        background: url("../../../assets/imgs/consult6_x.png");
        background-size: 0.45rem 0.38rem;
        input {
          width: 0.45rem;
          height: 0.38rem;
        }
        #imagePicker {
          overflow: hidden;
          //pointer-events:none;
          opacity: 0;
          width: 0.45rem;
          height: 0.38rem;
        }
      }


      .bottomsub {
        margin-top: 0.2rem;
        width: 1.22rem;
        height: 0.56rem;
        background: url("../../../assets/imgs/x_consultfs.png") no-repeat;
        background-size: 1.22rem 0.56rem;
      }
    }
    .c_sub{
      z-index:999;
      position: absolute;
      bottom: 0.2rem;
      right: 0.2rem;
      width: 0.5rem;
      height: 0.5rem;
      background: url("../../../assets/imgs/consult7_x.png") no-repeat;
      background-size: 0.4rem 0.34rem;
    }
  }
</style>
